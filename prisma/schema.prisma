// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  firstName     String       @default("John")
  lastName      String       @default("Doe")
  email         String       @unique
  emailVerified DateTime?
  phone         String       @default("5555555555")
  image         String?
  dob           DateTime     @default(now())
  gender        String       @default("male")
  accounts      Account[]
  sessions      Session[]
  Role          Role         @relation(fields: [roleId], references: [id])
  roleId        String
  Group         Group?       @relation(fields: [groupId], references: [id])
  groupId       String?
  CoachGroup    CoachGroup[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Participant {
  id           String      @id @default(cuid())
  firstName    String
  lastName     String
  email        String      @unique
  phone        String
  dob          DateTime
  gender       String
  married      Boolean?
  struggles    Struggle[]
  Mentor       Mentor      @relation(fields: [mentorId], references: [id])
  mentorId     String
  Group        Group?      @relation(fields: [groupId], references: [id])
  groupId      String?
  Attendance   Attendance? @relation(fields: [attendanceId], references: [id])
  attendanceId String?
}

model Mentor {
  id          String        @id @default(cuid())
  firstName   String
  lastName    String
  email       String        @unique
  phone       String
  Participant Participant[]
}

model Group {
  id           String        @id @default(cuid())
  participants Participant[]
  leaders      User[]
  userId       String
  Meeting      Meeting[]
  CoachGroup   CoachGroup?   @relation(fields: [coachGroupId], references: [id])
  coachGroupId String?
}

model CoachGroup {
  id     String  @id @default(cuid())
  user   User    @relation(fields: [userId], references: [id])
  groups Group[]
  userId String
}

model Role {
  id          String  @id @default(cuid())
  name        String
  description String?
  isAdmin     Boolean @default(false)
  User        User[]
}

model Struggle {
  id            String       @id @default(cuid())
  name          String
  Participant   Participant? @relation(fields: [participantId], references: [id])
  participantId String?
}

model ScheduleTemplate {
  id            String         @id @default(cuid())
  name          String
  description   String?
  scheduleItems ScheduleItem[]
}

model ScheduleItem {
  id                 String            @id @default(cuid())
  name               String
  description        String?
  ScheduleTemplate   ScheduleTemplate? @relation(fields: [scheduleTemplateId], references: [id])
  scheduleTemplateId String?
  Meeting            Meeting[]
}

model Meeting {
  id             String       @id @default(cuid())
  group          Group        @relation(fields: [groupId], references: [id])
  scheduleItem   ScheduleItem @relation(fields: [scheduleItemId], references: [id])
  date           DateTime
  groupId        String
  scheduleItemId String
  Attendance     Attendance[]
}

model Attendance {
  id           String        @id @default(cuid())
  meeting      Meeting       @relation(fields: [meetingId], references: [id])
  participants Participant[]
  meetingId    String
}
